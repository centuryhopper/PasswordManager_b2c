@* 

<div class="container-fluid">
    <EditForm Model="@Model" OnValidSubmit="HandleDelete" OnInvalidSubmit="ShowErrors">
        <div class="card">
            <h4 class="text-center card-header">
                Validate Account
            </h4>
            <div class="card-body">
                <DataAnnotationsValidator/>
                <p class="form-group">
                    <label class="m-2">Email</label>
                    <RadzenTextBox @bind-Value="Model.Email" class="form-control" />
                    <ValidationMessage For="@(() => Model.Email)"/>
                </p>

                <p class="form-group">
                    <label class="m-2">Password</label>
                    <RadzenPassword class="form-control" @bind-Value="@Model.Password" Visible="@(PasswordVisible == false)" />
                    <RadzenTextBox class="form-control" @bind-Value="@Model.Password" Visible="@PasswordVisible" />
                    <br>
                    <ValidationMessage For="@(() => Model.Password)"/>
                    Show <RadzenCheckBox @bind-Value="@PasswordVisible" />
                </p>
            </div>
            <div class="m-3">
                <button class="btn btn-primary">Submit Changes</button>
            </div>
        </div>
    </EditForm>
</div>


@code {

    private ValidateModel Model = new();
    private bool PasswordVisible;
    [Inject] private IAccountApiService accountApiService {get;set;}
    [Inject] private IModalService Modal {get;set;}
    [Inject] private NavigationManager NavManager {get;set;}
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void ShowErrors()
    {
        Modal.Show<AuthenticationErrorModal>("Error", new ModalParameters { { "ErrorMessage", "Incorrect email or password entered." } });
    }

    private async Task HandleDelete()
    {
        var validationRes = await accountApiService.ValidateEmailAndPassword(Model);
        if (validationRes == "success")
        {
            var deleteStatus = await accountApiService.DeleteUserAsync();

            if (deleteStatus.Successful)
            {
                NavManager.NavigateTo("goodbye");
            }
        }
        else
        {
            ShowErrors();
        }
    }
} *@